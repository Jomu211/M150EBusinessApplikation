@page "/feedback"
@using M150EBusinessApplikation.Data
@using M150EBusinessApplikation.Services
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager
@inject M150EBusinessApplikation.Services.UserService UserService

@attribute [Authorize(Roles = "Admin, User")]

<style>
    body {
        overflow-y: scroll !important;
    }

    .flex-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .form-control {
        overflow-y: hidden !important;
    }
</style>
@if (Feedback == null)
{
    <div>Loading...</div>
}
else
{
    <div class="flex-container">

        @if (LastFeedbackTime > DateTime.Now)
        {
            <h3 class="text-center">Thanks for your Feedback!</h3>

            <h3 class="text-center" style="font-size:25px;">You just wrote a feedback, please wait a moment</h3>
        }
        else
        {
            <h3 class="text-center">Give Feedback</h3>

            <EditForm Model="@Feedback" OnValidSubmit="@SubmitFeedback">
                <DataAnnotationsValidator />
                <div class="container">
                    <div class="row">
                        <div class="col" style="text-align:center;margin-bottom:13px;">
                            <StarRatingPartialView Rating="@Feedback.Rating" RatingChanged="UpdateRating" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <input class="form-control" autocomplete="Username" aria-required="true" placeholder="name@example.com" @bind="@Feedback.EmailAddress" />
                            <ValidationMessage For="() => Feedback.EmailAddress" style="text-align:center"/>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <textarea class="form-control" autocomplete="FeedbackText" aria-required="true" placeholder="Feedback Text" @bind="@Feedback.FeedbackText"></textarea>
                            <ValidationMessage For="() => Feedback.FeedbackText" />

                        </div>
                    </div>
                    <div class="col">
                        <button type="submit" class="ml-md-auto btn btn-primary" style="width: 100%;font-size: 30px;">
                            Send Feedback
                        </button>
                    </div>
                </div>
            </EditForm>
        }
    </div>


}




@code {

    //ClaimsPrincipal des aktuellen Benutzers, von .NET Core bereitgestellt
    protected ClaimsPrincipal? User;

    //Benutzerprofil des aktuellen Benutzers
    protected UserProfil UserProfil = null!;

    //Name des aktuellen Benutzers
    protected string? Name;

    //Benutzername, abgeleitet aus der E-Mail-Adresse des aktuellen Benutzers
    protected string? Username;

    //Aktuelles Feedback-Objekt
    public Feedback? Feedback { get; set; }

    //Liste von Feedback-Objekten
    public List<Feedback?> Feedbacks { get; set; }

    //Zeit des letzten erhaltenen Feedbacks
    public DateTime? LastFeedbackTime;


    //Initalisiert UserProfil und Feedback-Objekt mit Daten aus Datenbank
    //Username wird aus Email-Adresse generiert
    protected override void OnInitialized()
    {
        UserService.LoadUserAsync(out User, out Name);
        UserProfil = UserService.InitializeUserProfil(Name);

        InitializeFeedbackModel();
        SetLastFeedbackTime();
        Username = Name.Split('@', 2)[0].Replace('.', ' ');
    }

    //Initialisiert Feedback Model mit Daten aus Datenbank
    public void InitializeFeedbackModel()
    {
        Feedback = new Feedback
            {
                UserProfilId = UserProfil.Id,
                Username = Name.Split('@', 2)[0].Replace('.', ' '),
                EmailAddress = Name
            };
    }

    //Aktualisiert LastFeedbackTime des Feedback-Objekts basierend auf zuletzt erhaltenen Feedback für den aktuellen Benutzer
    private void SetLastFeedbackTime()
    {
        LastFeedbackTime = Db.Feedbacks?.OrderByDescending(t => t.FeedbackTime).FirstOrDefault(t => t.UserProfilId == Feedback.UserProfilId)?.FeedbackTime.AddMinutes(3);
    }

    //Speichert Feedback in der Datenbank und navigiert zu Feedback-Seite zurück
    private async Task SubmitFeedback()
    {
        try
        {
            if (Feedback.Id == 0)
            {
                Db.Feedbacks.Add(Feedback);
                Db.Entry(Feedback).State = EntityState.Added;

            }
            await Db.SaveChangesAsync();
            NavigationManager.NavigateTo("feedback", true);
        }
        catch (Exception e)
        {
            throw e;
        }
    }
    //Aktualisiert Bewertung des Feedback-Objekts mit neuem "value" Wert
    void UpdateRating(int value)
    {
        Feedback.Rating = value;
    }
}
