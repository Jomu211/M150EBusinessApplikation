@page "/shoppingcart"
@using System.Security.Claims
@using BootstrapBlazor.Components;
@using M150EBusinessApplikation.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.EntityFrameworkCore
@using NuGet.Protocol
@using Newtonsoft.Json;


@inject M150EBusinessApplikation.Services.ChampionService ChampionService
@inject Microsoft.AspNetCore.Components.NavigationManager navigation
@inject M150EBusinessApplikation.Services.UserService UserService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ProtectedLocalStorage ProtectedLocalStorageStore
@inject DialogService DialogService
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = "Admin, User")]
<style>
    body {
        overflow-y: scroll !important;
    }

    .shopControl {
        font-size: 45px;
        font-family: 'Poppins', sans-serif;
        color: whitesmoke;
        display: flex;
        margin: 50px;
        text-align: left;
        flex-direction: row;
        justify-content: space-between;
    }

    div.itemListContainer {
        width: 100%;
        display: flex;
        margin: 10px;
        flex-direction: column;
        align-items: flex-start;
    }

    div.itemContainer {
        background-color: #1d1d1d7d;
        border-radius: 5px;
        padding: 20px;
        height: auto;
        width: 85%;
        align-self: center;
        display: flex;
        margin: 30px;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .itemImageContainer {
        display: inline-block;
    }

    .itemText {
        padding: 10px;
        padding-top: 0px;
        margin-top: -8px;
        position: relative;
        top: 10px;
        display: inline-block;
        color: whitesmoke;
    }

    .itemButton {
        float: right;
    }

    .itemImage {
        width: 200px;
        border-radius: 5px;
    }


    .shopItemDescription, .shopItemName, .shopItemPrice {
        font-size: 15px;
        font-family: 'Poppins', sans-serif !important;
        text-shadow: #333 1px 0 10px;
    }

    .shopItemName {
        font-size: 30px;
    }

    p.shopItemPrice {
        margin-top: 10px;
        font-size: 25px;
    }

    .championInfo {
        color: whitesmoke;
        display: none;
        font-family: 'Poppins', sans-serif !important;
        text-shadow: #333 1px 0 10px;
        display: inline-block;
        font-size: 19px;
    }

    html body button.btn.btn-primary {
        margin: 0px;
    }

    .shoppingCardButton {
        min-width: 313px;
        cursor: pointer;
        min-height: 68px;
    }

    .shoppingCardTitle {
        font-size: 60px;
    }
</style>
@code {
    //Liste von UserGameChampion-Objekten -> ausgewählte Artikel im Warenkorb
    private List<UserGameChampion> ShoppingCart = new List<UserGameChampion>();

    //Liste von Champion-Objekten -> alle verfügbaren Champions
    protected List<Champion> Champions = null!;

    //ClaimsPrincipal des aktuellen Benutzers, von .NET Core bereitgestellt
    protected ClaimsPrincipal? User;

    //Benutzerprofil des aktuellen Benutzers
    protected UserProfil UserProfil = null!;

    // Task -> Authentifizierungsstatus
    protected Task<AuthenticationState> AuthState = null!;

    //Name des aktuellen Benutzers
    protected string? Name;

    //Anzahl Kosten der Champions im Warenkorb
    protected int? Costs = 0;

    //Anzahl Artikel im Warenkorb
    private int ItemsInCart = 0;

    //Initalisiert und lädt UserProfil, Name, Champions und ShoppingCart
    //Berechnet Kosten der Champions im Warenkorb
    protected override async Task OnInitializedAsync()
    {
        UserService.LoadUserAsync(out User, out Name);
        UserProfil = UserService.InitializeUserProfil(Name);
        ShoppingCart = await GetCartItems();
        Champions = ChampionService.LoadChampions();

        foreach (var champ in ShoppingCart)
        {
            Costs += champ.Champion.Price;
        }
        await GetItemCounter();
    }

    //Holt die Anzahl Artikel im Warenkorb aus dem LocalStorage
    //Setzt itemCounter auf die Anzahl Artikel im Warenkorb
    //falls itemCounter nicht existiert, wird er auf 0 gesetzt
    private async Task GetItemCounter()
    {
        var result = await ProtectedLocalStorageStore.GetAsync<string>("itemCounter");
        ItemsInCart = result.Success && int.TryParse(result.Value, out int count) ? count : 0;
    }

    //Verringert den Wert von itemCounter um 1
    private async Task DecreaseItemCounter()
    {
        ItemsInCart--;
        await ProtectedLocalStorageStore.SetAsync("itemCounter", ItemsInCart.ToString());

    }

    //Holt die Artikel aus dem LocalStorage
    //Deserialisiert die Artikel und gibt sie zurück
    private async Task<List<UserGameChampion>> GetCartItems()
    {
        var cartJson = await ProtectedLocalStorageStore.GetAsync<string>("shoppingCart");

        if (!string.IsNullOrEmpty(cartJson.Value))
        {
            return JsonConvert.DeserializeObject<List<UserGameChampion>>(cartJson.Value);
        }

        return new List<UserGameChampion>();
    }

    //Entfernt Champion aus dem Warenkorb
    //Verringert Kosten um Preis des Champions
    //Serialisiert ShoppingCart und speichert es im LocalStorage
    [ValidateAntiForgeryToken]
    private async Task RemoveChampionFromCart(UserGameChampion champ)
    {
        await DecreaseItemCounter();
        ShoppingCart.Remove(champ);
        Costs -= champ.Champion.Price;
        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };
        var cartJson = JsonConvert.SerializeObject(ShoppingCart, settings);

        await ProtectedLocalStorageStore.SetAsync("shoppingCart", cartJson);

        StateHasChanged();
    }

    //Entfernt alle Champions aus dem Warenkorb
    //Setzt itemCounter auf 0
    private async Task ClearCart()
    {
        await ProtectedLocalStorageStore.DeleteAsync("shoppingCart");
        await ProtectedLocalStorageStore.DeleteAsync("itemCounter");
        ShoppingCart.Clear();
        ItemsInCart = 0;
        StateHasChanged();
    }

    //Kauft alle Champions im Warenkorb
    //Überprüft ob genügend Coins vorhanden sind und der Warenkorb nicht leer ist
    //-> falls ja, werden die Champions gekauft, wird in DB gespeichert, Coins werden abgezogen und der Warenkorb wird geleert
    //-> falls nein, wird eine Fehlermeldung angezeigt
    //Zeigt eine Erfolgsmeldung an
    //Navigiert zurück zur Shop-Seite
    [ValidateAntiForgeryToken]
    private async Task BuyChampionInCart
    (List<UserGameChampion> championsToBuy)
    {
        if (UserProfil.Coins < Costs)
        {
            ShowAlert("Not enough coins");
            return;
        }
        if (championsToBuy.Count == 0)
        {
            ShowAlert("Cart is empty");
            return;
        }

        UpdateUserCoins();
        await SafeDbChange();

        UpdateUserGameChampions(championsToBuy);
        await Db.SaveChangesAsync();

        await ClearCart();

        ShowAlert("Champions bought");

        await ChampionService
            .RestartGame(Champions, JsRuntime, Name);
        await ProtectedLocalStorageStore
            .DeleteAsync("TryCount");

        NavigateToShop();
    }

    //Setzt Bought auf true für alle Champions im Warenkorb
    //Speichert Änderungen in der Datenbank
    private void UpdateUserGameChampions
    (List<UserGameChampion> championsToBuy)
    {
        foreach (var champ in championsToBuy)
        {
            champ.Bought = true;
            Db.UserGameChampions.Update(champ);
        }
    }

    //Zieht Kosten von Coins ab
    //Speichert Änderungen in der Datenbank
    private void UpdateUserCoins()
    {
        UserProfil.Coins -= Costs;
        Db.UserProfiles.Update(UserProfil);
    }

    //Speichert Änderungen in der Datenbank
    //Löscht alle Einträge aus dem ChangeTracker
    private async Task SafeDbChange()
    {
        await Db.SaveChangesAsync();
        Db.ChangeTracker.Clear();
    }

    //Zeigt eine Alert-Box mit der übergebenen Nachricht an
    private async void ShowAlert(string message)
    {
        await JsRuntime
            .InvokeVoidAsync("alert", message);
    }

    //Navigiert zurück zur Shop-Seite
    void NavigateToShop()
    {
        navigation.NavigateTo("/shop");
    }
}


<div class="shopControl">
    <div style="float:left;">
        <div class="shoppingCardTitle">
            Shopping Cart
        </div>
        <div>
            Coins: @UserProfil.Coins
        </div>
        <div style="color: red;">
            Costs: @Costs
        </div>

    </div>
    <div style="float:right;">
        <div style="height:80px;">
            <button class="btn btn-primary shoppingCardButton" @onclick="() => NavigateToShop()">Back to Shop</button>
        </div>
        <div style="height:80px;">
            <button class="btn btn-primary shoppingCardButton" @onclick="() => BuyChampionInCart(ShoppingCart)">Buy Champions</button>
        </div>
    </div>


</div>
<div class="itemListContainer">
    @foreach (var item in ShoppingCart.OrderBy(t => t.Champion.Price))
    {
        <div class="itemContainer">
            <div class="itemImageContainer">
                <img src="@item.Champion.ImageUrl" class="itemImage" />
            </div>
            <div class="itemText">
                <h3 class="shopItemName">@item.Champion.Name</h3>
                <p class="shopItemPrice">Price: @item.Champion.Price</p>
            </div>
            <div class="championInfo">
                <table>
                    <tr>
                        <td>Region:</td>
                        <td>@item.Champion.Region</td>
                    </tr>
                    <tr>
                        <td>Gender:</td>
                        <td>@item.Champion.Gender</td>
                    </tr>
                    <tr>
                        <td>Resource:</td>
                        <td>@item.Champion.Resource</td>
                    </tr>
                    <tr>
                        <td style="padding-right:10px">Combat Style:</td>
                        <td>@item.Champion.CombatStyle</td>
                    </tr>

                    @if (item.Champion.Head.Haircolor != null)
                    {
                        <tr>
                            <td>Hair color:</td>
                            <td>@item.Champion.Head.Haircolor</td>
                        </tr>

                    }
                    @if (item.Champion.Head.Headgear != null)
                    {
                        <tr>
                            <td>Head gear:</td>
                            <td>@item.Champion.Head.Headgear</td>
                        </tr>

                    }
                    @if (item.Champion.Head.Other != null)
                    {
                        <tr>
                            <td>Other:</td>
                            <td>@item.Champion.Head.Other</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="itemButton">
                <button class="btn btn-primary" @onclick="() => RemoveChampionFromCart(item)">Remove</button>
            </div>
        </div>
    }

</div>

