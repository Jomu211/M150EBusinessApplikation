@page "/shop"
@using System.Security.Claims
@using BootstrapBlazor.Components;
@using M150EBusinessApplikation.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using NuGet.Protocol
@using Newtonsoft.Json;


@inject M150EBusinessApplikation.Services.ChampionService ChampionService
@inject Microsoft.AspNetCore.Components.NavigationManager navigation
@inject M150EBusinessApplikation.Services.UserService UserService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ProtectedLocalStorage ProtectedLocalStorageStore
@inject DialogService DialogService
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@inject IJSRuntime JsRuntime


@attribute [Authorize(Roles = "Admin, User")]

<style>
    body {
        overflow-y: scroll !important;
    }

    div.shopControl {
        display: block;
        margin: 50px;
        text-align: left;
    }

    .shopControl div {
        font-size: 60px;
        font-family: 'Poppins', sans-serif;
        color: whitesmoke;
    }

    div.itemListContainer {
        width: 100%;
        display: flex;
        margin: 10px;
        flex-direction: column;
        align-items: flex-start;
    }

    div.itemContainer {
        background-color: #1d1d1d7d;
        border-radius: 5px;
        padding: 20px;
        height: auto;
        width: 85%;
        align-self: center;
        display: flex;
        margin: 30px;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .itemImageContainer {
        display: inline-block;
    }

    .itemText {
        padding: 10px;
        padding-top: 0px;
        margin-top: -8px;
        position: relative;
        top: 10px;
        display: inline-block;
        color: whitesmoke;
    }

    .itemButton {
        float: right;
    }

    .itemImage {
        width: 200px;
        border-radius: 5px;
    }


    .shopItemDescription, .shopItemName, .shopItemPrice {
        font-size: 15px;
        font-family: 'Poppins', sans-serif !important;
        text-shadow: #333 1px 0 10px;
    }

    .shopItemName {
        font-size: 30px;
    }

    p.shopItemPrice {
        margin-top: 10px;
        font-size: 25px;
    }

    .championInfo {
        color: whitesmoke;
        display: none;
        font-family: 'Poppins', sans-serif !important;
        text-shadow: #333 1px 0 10px;
        display: inline-block;
        font-size: 19px;
    }
</style>
@code {
    private List<UserGameChampion> ShoppingCart = new List<UserGameChampion>();

    protected List<UserGameChampion> ChampionsToBuy = null!;
    protected List<Champion> Champions = null!;
    protected ClaimsPrincipal? User;
    protected UserProfil UserProfil = null!;
    protected Task<AuthenticationState> AuthState = null!;
    protected string? Name;

    protected override void OnInitialized()
    {
        UserService.LoadUserAsync(out User, out Name);
        UserProfil = UserService.InitializeUserProfil(Name);
        Champions = ChampionService.LoadChampions();
        ChampionService.InitializeUserGameChampions(Name, Champions);
        ChampionsToBuy = ChampionService.LoadChampionsToBuy();

    }

    protected override async Task OnInitializedAsync()
    {
        await GetShoppingCart();
    }
    protected async Task GetShoppingCart()
    {
        var cartJson = await ProtectedLocalStorageStore.GetAsync<string>("shoppingCart");
        if (!string.IsNullOrEmpty(cartJson.Value))
        {
            ShoppingCart = JsonConvert.DeserializeObject<List<UserGameChampion>>(cartJson.Value);
        }

    }

    private async Task AddChampionToCart(UserGameChampion champToBuy)
    {
        ShoppingCart.Add(champToBuy);

        var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            };

        var cartJson = JsonConvert.SerializeObject(ShoppingCart, settings);

        await ProtectedLocalStorageStore.SetAsync("shoppingCart", cartJson);
        StateHasChanged();

    }


    void NavigateToShoppingCart()
    {
        navigation.NavigateTo("/shoppingcart");
    }
}

<PageTitle>Shop</PageTitle>

<div class="shopControl">
    <div><i style="float:right; display:inline-block; cursor:pointer" @onclick="() => NavigateToShoppingCart()" class="fa-solid fa-shopping-cart"></i></div>
    <div>
        Champion Shop
    </div>
    <div>
        Coins: @UserProfil.Coins

    </div>
</div>
<div class="itemListContainer">
    @foreach (var item in ChampionsToBuy.Where(t => t.Bought == false && !ShoppingCart.Contains(t)).OrderBy(t => t.Champion.Price))
    {
        
        <div class="itemContainer">
            <div class="itemImageContainer">
                <img src="@item.Champion.ImageUrl" class="itemImage" />
            </div>
            <div class="itemText">
                <h3 class="shopItemName">@item.Champion.Name</h3>
                <p class="shopItemPrice">Price: @item.Champion.Price</p>
            </div>
            <div class="championInfo">
                <table>
                    <tr>
                        <td>Region:</td>
                        <td>@item.Champion.Region</td>
                    </tr>
                    <tr>
                        <td>Gender:</td>
                        <td>@item.Champion.Gender</td>
                    </tr>
                    <tr>
                        <td>Resource:</td>
                        <td>@item.Champion.Resource</td>
                    </tr>
                    <tr>
                        <td style="padding-right:10px">Combat Style:</td>
                        <td>@item.Champion.CombatStyle</td>
                    </tr>

                    @if (item.Champion.Head.Haircolor != null)
                    {
                        <tr>
                            <td>Hair color:</td>
                            <td>@item.Champion.Head.Haircolor</td>
                        </tr>

                    }
                    @if (item.Champion.Head.Headgear != null)
                    {
                        <tr>
                            <td>Head gear:</td>
                            <td>@item.Champion.Head.Headgear</td>
                        </tr>

                    }
                    @if (item.Champion.Head.Other != null)
                    {
                        <tr>
                            <td>Other:</td>
                            <td>@item.Champion.Head.Other</td>
                        </tr>

                    }
                </table>
            </div>
            <div class="itemButton">
                <div class="itemButton">

                    <button class="btn btn-primary" @onclick="() => AddChampionToCart(item)">Add to cart</button>

                </div>
            </div>
        </div>
    }
</div>

